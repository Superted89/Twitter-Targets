import processing.core.*; 
import processing.data.*; 
import processing.event.*; 
import processing.opengl.*; 

import ddf.minim.*; 
import processing.pdf.*; 
import java.util.Date; 
import ddf.minim.ugens.*; 

import twitter4j.conf.*; 
import sms.*; 
import twitter4j.internal.async.*; 
import twitter4j.internal.org.json.*; 
import twitter4j.internal.logging.*; 
import twitter4j.json.*; 
import twitter4j.internal.util.*; 
import twitter4j.management.*; 
import twitter4j.auth.*; 
import twitter4j.api.*; 
import twitter4j.util.*; 
import twitter4j.internal.http.*; 
import twitter4j.*; 
import twitter4j.internal.json.*; 

import java.util.HashMap; 
import java.util.ArrayList; 
import java.io.File; 
import java.io.BufferedReader; 
import java.io.PrintWriter; 
import java.io.InputStream; 
import java.io.OutputStream; 
import java.io.IOException; 

public class Twitter_Targets_BETA extends PApplet {

static String OAuthConsumerKey    = "enter your consumer key";
static String OAuthConsumerSecret = "enter your consumer secret";
static String AccessToken         = "enter your access token";
static String AccessTokenSecret   = "enter your access token secret";
String myTimeline;
String  myQueryWord = "cheese";
java.util.List statuses = null;
User[] friends;
TwitterFactory twitterFactory;
Twitter twitter;
RequestToken requestToken;
String[] theSearchTweets = new String[11];
long previousIdOfTweetContainingQuery = 0;
private static AccessToken loadAccessToken() {
  return new AccessToken(AccessToken, AccessTokenSecret); // get my oauth details
}


String [] headlines;
public float inByte;
public String msg; //the tweets 
public int speed;
public float total = 20.00f;
boolean locked;

String typing = ""; // enter new tweet
String saved = ""; //save tweet to search
ArrayList<Tweets> tweets; //tweets array
boolean running = true; 
boolean pull;
int delayTime = 2000;
PrintWriter output; //write to txt file
PImage img;
PImage forest;
PImage bullet;
PImage ammoi;
PImage lockedi;
PImage unlockedi;
PFont font;
PFont arial;
boolean start;
boolean runOnce = true;
boolean keyed;
int score = 0;
int playButtonWidth, playButtonHeight;
int playButtonX, playButtonY;
int ammo = 5;
int middle = displayWidth/3 + displayWidth/9;
Minim minim;
AudioSample bang;
AudioSample hit;
AudioSample reload;
AudioPlayer forestSound;


public void setup() {
  size(1280, 800); 
  frame.setTitle("Twitter Targets BETA!!");
  font = createFont("PICOWA__.TTF", 20);       //Fonts
  arial = createFont("Arial", 80);
  textFont(font, 20);
  
  img = loadImage("twitter_bird.png");         //Images
  forest = loadImage("clouds.png");
  bullet = loadImage("bullet.jpg");
  ammoi = loadImage("ammo.png");
  lockedi = loadImage("locked.png");
  unlockedi = loadImage("unlocked.png");
  myQueryWord = "";
   
  minim = new Minim(this);                     //Sounds
  bang = minim.loadSample("bang.mp3");
  hit = minim.loadSample("hit.mp3");
  forestSound = minim.loadFile("forest.mp3");
  reload = minim.loadSample("reload.mp3");
  forestSound.play();
 


}
public void draw() {

  if (start == true) {
    gameScreen();                     //Game
  }
  else if (start == false) {
    welcomeScreen();                  //Welcome screen
  }
  
  if ((total <= 0.0f) && (start == true)){
    gameOver();                       //Game over screen
}
}


public class Tweets {
  String files = "file";
  float ix = random(1200);
  float iy = random(570);
  float iw = 25;
  float ih = 25;
  boolean collide;
  float iyi = iy;
  int speed = 0;
  int up = 0;

  public void getTweet(int index) {

    if (index < headlines.length) {
      image(img, ix, iyi, 100, 100);
      iyi = iyi + speed;
     
      if (iyi == iy ) {
        total = total - 0.011f;
      }
      
      if ((collide == true) && (iyi == iy) && (total > 0)) {
        image(bullet, ix+30, iy+40, 25, 25);
        fill(255);
        hit.trigger();
        speed = 30;
        total = total + 1.00f;
        score = score + 1;
      }
     
      if (speed > 5) {
        textFont(arial, 10);
        fill(255);
        text(headlines[index], ix, iy, iw, ih);
        iyi = iyi + 10;
        iy = iy - 1;
        iw = iw + 4;
        ih = ih + 3;
      }
    }

    if ((mousePressed == true) && (collide == false) && (ammo > 0)) {
      bang.trigger();
    }
  }

  public void check() {
    if (mousePressed && ammo > 0) {
      if ((rectRectIntersect(ix, iy, ix+100, iy+100, mouseX, mouseY, mouseX, mouseY) == true)) {
        collide = true;
      }
    }
    else {
      collide = false;
    }
  }
}


public void getSearch() {
  while (running == true){
  try {
    println ("Searching.... Current time = " + hour() + ":" + minute() + ":" + second()); 
    Query query = new Query(myQueryWord);

    query.count(50); // how many results to fetch

    QueryResult result = twitter.search(query);

    ArrayList tweetsContainingQuery = (ArrayList) result.getTweets();
    if (tweetsContainingQuery.size() > 0) {
      Status mostRecentTweetContainingQuery = (Status) tweetsContainingQuery.get(0);
      long mostRecentTweetContainingQueryId = mostRecentTweetContainingQuery.getId();

      if (previousIdOfTweetContainingQuery == 0) {
        previousIdOfTweetContainingQuery = mostRecentTweetContainingQueryId;
      }
      if (mostRecentTweetContainingQueryId != previousIdOfTweetContainingQuery) {
        // my word is tweeted
        previousIdOfTweetContainingQuery = mostRecentTweetContainingQueryId;
        Date d = mostRecentTweetContainingQuery.getCreatedAt();
       
        msg = mostRecentTweetContainingQuery.getText(); //msg becomes tweets
       
        tweets.add(new Tweets());     // add to the tweet array
        println(msg);                 //print in console for reference
        output.println(msg);         
        output.flush();               //save to text file
       
                    //add to total to display number of tweets
        }
    }
  }

  catch (TwitterException te) {
    println("Error connecting to Twitter: " + te); //let me know if somethings not right
  };
  delay(delayTime); // Delay time between fetching tweets
  
}
}



public void configure(){
  ConfigurationBuilder cb = new ConfigurationBuilder();
  cb.setOAuthConsumerKey(OAuthConsumerKey);
  cb.setOAuthConsumerSecret( OAuthConsumerSecret );
  cb.setOAuthAccessToken( AccessToken);
  cb.setOAuthAccessTokenSecret( AccessTokenSecret );
  twitterFactory = new TwitterFactory(cb.build());
  twitter = twitterFactory.getInstance();
  println("connected");
}

public void gameOver(){
  running = false;
  image(forest, 0, 0, displayWidth, displayHeight);
    font = createFont("PICOWA__.TTF", 35);
    textFont(font, 80);
    fill(255);
    text("GAME OVER", 400, 100);
    
    text("Score : " + score, 440, 500);
    fill(255);
    textFont(font,50);
   
    text("Try again?", 490, 300, 100);
    if ((rectRectIntersect(800, 300, 800+100, 300+100, mouseX, mouseY, mouseX+400, mouseY+100) == true)) {
    fill(0);
    text("Try again?", 490, 300, 100);
    }
   
    if(mousePressed){
    if ((rectRectIntersect(800, 300, 800+100, 300+100, mouseX, mouseY, mouseX+400, mouseY+100) == true)) {
      hit.trigger();
      start = false;
      
    }
    else {
      bang.trigger();
    }
  }
}

  
    
public void gameScreen() {
   
  if (runOnce == true) {                 
    ammo = 4;
    score = 0;
    total = 20.00f;
    running = true;
    configure();
    thread("getSearch");
    tweets = new ArrayList<Tweets>(); 
    output = createWriter("tweets.txt");
    tweets.add(new Tweets()); 
    runOnce = false;
  }
  image(forest, 0, 0, 1280, 800);
  cursor(CROSS);
  headlines = loadStrings("tweets.txt");
  if (headlines.length < 1){
    fill(255);
    textFont(font, 40);
    text("Get Ready...", 500, 300);
  }
  for (int i = tweets.size()-1;i>=0;i--) {      //add tweets as they come in and show at the top of the screen - height
    Tweets tweet = tweets.get(i);
    tweet.getTweet(i);
    tweet.check();
  }
  
  fill(255);
  rect(560,20,150, 40, 20);
  rect(40,20, 100, 40, 20);
  rect(1050, 20, 190, 40, 20);
  image(ammoi, 1065, 25, 40, 30);
  image(ammoi, 1105, 25, 40, 30);
  image(ammoi, 1145, 25, 40, 30);
  image(ammoi, 1185, 25, 40, 30);
  textFont(font, 40);
  fill(0);
  
  text(total, 557, 50);
  text(score, 50, 50 );
  if(ammo == 3){
    fill(255);
    rect(1180,25,40,35);
  }
  else if (ammo == 2){
    fill(255);
    rect(1180,25,40,35);
    rect(1140,25,40,35);
  }
  else if (ammo == 1){
    fill(255);
    rect(1180,25,40,35);
    rect(1140,25,40,35);
    rect(1100, 25, 40, 35);
  }
   else if (ammo == 0){
    fill(255);
    rect(1180,25,40,35);
    rect(1140,25,40,35);
    rect(1100, 25, 40, 35);
    rect(1060,25,40,35,20);
    fill(0);
    text("RELOAD!", 1065, 50);
  }
  if (mousePressed && total > 1) {
    ammo = ammo - 1;
    mousePressed = false;
 
  }
  
  if (ammo < 0) {
     ammo = 0;
  }
   reloading();
}
public void welcomeScreen() {

  
  image(forest, 0, 0, 1280, 800);
  textFont(font, 100);
  textMode(CENTER);
  fill(255);
  text("Twitter Targets", 185 , 200, 1000, 500);
  noFill();
  noStroke();
  
  textMode(CENTER);
  fill(255);
  text("Start", 480, 500, 100);
  if ((rectRectIntersect(700, 500, 700+100, 500+100, mouseX, mouseY, mouseX+200, mouseY+100) == true)) {
    fill(0);
    text("Start", 480, 500, 100);
  }
  fill(255);
  textFont(arial, 18);
  rect(500, 100, 300, 50, 18);
  if (locked == true){
    image(lockedi, 750, 110, 30, 30);
  }
  else 
  {
    image(unlockedi, 750, 110, 30, 30);
  }

    
  textMode(CENTER);
  text("Enter a hashtag and press enter to lock/unlock. Shoot the birds before the time runs out. To reload, hit enter", 205, 350, 1000, 220);
  fill(0);
  text("# " + typing, 510, 135);

  if (mousePressed && start == false) {
    if ((rectRectIntersect(700, 500, 700+100, 500+100, mouseX, mouseY, mouseX+200, mouseY+100) == true)) {
      hit.trigger();
      runOnce = true;
      start = true;
      mousePressed = false;
      
    }
    else {
      bang.trigger();
     
    }
  }
}
public void keyPressed() {
  if (key == '\n' && start ==false && locked == false) {
   
    
    myQueryWord = typing;
   }
  
   else {
     if (keyCode == BACKSPACE && typing.length() > 0 && locked == false) {
      typing = typing.substring(0, typing.length() -1);
    } 
    else 
       if (key != CODED && locked == false) typing += key;
       
  }
  
  if (key == ENTER && start == false && locked == false){
    locked = true;
  }
  else if (key ==ENTER && start == false && locked == true){
    typing = " ";
    locked = false;
  }
}


public void reloading(){
  if (keyPressed == true){
    if((key == ENTER && start ==true && ammo < 4)|| (key == RETURN && start == true && ammo < 4) ){
 
  ammo = ammo + 1;
  reload.trigger();
  keyPressed = false;
  
  
  if (ammo >= 4){
    ammo = 4;

  }
  }
  }
  
}

public boolean rectRectIntersect(float left, float top, float right, float bottom, 
float otherLeft, float otherTop, float otherRight, float otherBottom) {
  return !(left > otherRight || right < otherLeft || top > otherBottom || bottom < otherTop);
}
  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "--full-screen", "--bgcolor=#666666", "--stop-color=#cccccc", "Twitter_Targets_BETA" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
